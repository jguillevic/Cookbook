//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace Cookbook.UWP.IngredientServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ingredient", Namespace="http://schemas.datacontract.org/2004/07/Cookbook.Entity.Recipe")]
    public partial class Ingredient : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IngredientServiceReference.IIngredientService")]
    public interface IIngredientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIngredientService/Load", ReplyAction="http://tempuri.org/IIngredientService/LoadResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient>> LoadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIngredientService/Add", ReplyAction="http://tempuri.org/IIngredientService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient> ingredients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIngredientService/Update", ReplyAction="http://tempuri.org/IIngredientService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient> ingredients);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIngredientServiceChannel : Cookbook.UWP.IngredientServiceReference.IIngredientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IngredientServiceClient : System.ServiceModel.ClientBase<Cookbook.UWP.IngredientServiceReference.IIngredientService>, Cookbook.UWP.IngredientServiceReference.IIngredientService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IngredientServiceClient() : 
                base(IngredientServiceClient.GetDefaultBinding(), IngredientServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IIngredientService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IngredientServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(IngredientServiceClient.GetBindingForEndpoint(endpointConfiguration), IngredientServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IngredientServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IngredientServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IngredientServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IngredientServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IngredientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient>> LoadAsync() {
            return base.Channel.LoadAsync();
        }
        
        public System.Threading.Tasks.Task AddAsync(System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient> ingredients) {
            return base.Channel.AddAsync(ingredients);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(System.Collections.Generic.List<Cookbook.UWP.IngredientServiceReference.Ingredient> ingredients) {
            return base.Channel.UpdateAsync(ingredients);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IIngredientService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IIngredientService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:58204/Recipe/IngredientService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return IngredientServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IIngredientService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return IngredientServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IIngredientService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IIngredientService,
        }
    }
}
